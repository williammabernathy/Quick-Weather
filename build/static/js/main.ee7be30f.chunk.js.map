{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["scrollTop","window","scrollTo","top","behavior","App","props","state","results","searchZipCode","setWeather","bind","fetchWeather","fetchWeatherSearch","handelZipChange","this","setState","fetch","then","response","json","event","preventDefault","searchedValue","test","alert","target","value","weatherInfo","message","Array","i","j","list","dt_txt","Math","round","main","temp","feels_like","temp_min","temp_max","humidity","weather","description","charAt","toUpperCase","slice","wind","speed","icon","city","name","getWeatherData","className","Navbar","bg","variant","sticky","Brand","href","Toggle","Collapse","Form","Button","onClick","Text","onSubmit","Group","Label","Control","type","placeholder","onChange","as","CardDeck","map","data","index","Card","key","Img","src","alt","Header","dateString","d","Date","replace","currentDay","getDay","currentMonth","getMonth","hours","getHours","AmOrPm","finalTime","getMinutes","getDate","toString","getDaysOfWeek","Body","React","Component","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.ee7be30f.chunk.js","sourcesContent":["import React from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport Card from 'react-bootstrap/Card';\r\nimport Form from 'react-bootstrap/Form';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Navbar from 'react-bootstrap/Navbar';\r\nimport CardDeck from 'react-bootstrap/CardDeck';\r\nimport './App.css';\r\n\r\n// function for getting the day, month and standard time using the date string\r\n// return from the api call\r\nfunction getDaysOfWeek(dateString) {\r\n  var d = new Date(dateString.replace(' ', 'T'));\r\n  var weekday = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\r\n  var month = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\r\n  var currentDay = d.getDay();\r\n  var currentMonth = d.getMonth();\r\n\r\n  // convert military time to 12 hour format including AM or PM\r\n  var hours = d.getHours();\r\n  var AmOrPm = hours >= 12 ? \"p.m.\" : \"a.m.\";\r\n  hours = (hours % 12) || 12;\r\n  var minutes = d.getMinutes();\r\n  var finalTime = hours + \":\" + minutes + \"0 \" + AmOrPm.toUpperCase();\r\n\r\n  var dayName = (weekday[currentDay] + \", \" + month[currentMonth] + \" \" + d.getDate() + \" | \" + finalTime).toString();\r\n\r\n  return dayName;\r\n}\r\n\r\n// function called to smooth scroll to the top of the page\r\nfunction scrollTop() {\r\n  window.scrollTo({ top: 0, behavior: 'smooth' });\r\n};\r\n\r\n// function for getting the weather data\r\n/*\r\nweatherInfo[i][0] = list.dt_text (date)\r\nweatherInfo[i][1] = temp\r\nweatherInfo[i][2] = feels like\r\nweatherInfo[i][3] = min temp\r\nweatherInfo[i][4] = max temp\r\nweatherInfo[i][5] = humidity %\r\nweatherInfo[i][6] = weather.main/weather.description\r\nweatherInfo[i][7] = wind speed\r\nweatherInfo[i][8] = weather icon\r\nweatherInfo[i][9] = city name\r\n*/\r\nfunction getWeatherData(results) {\r\n  if (results.message === \"city not found\") { return null; }\r\n\r\n  var weatherInfo = new Array(39);\r\n\r\n  // populate array with arrays\r\n  for (var i = 0; i < 39; i++) {\r\n    weatherInfo[i] = new Array(10);\r\n  }\r\n\r\n  // will nested arrays with data\r\n  for (var j = 0; j < 39; j++) {\r\n    weatherInfo[j][0] = results.list[j].dt_txt;\r\n    weatherInfo[j][1] = Math.round(results.list[j].main.temp);\r\n    weatherInfo[j][2] = Math.round(results.list[j].main.feels_like);\r\n    weatherInfo[j][3] = Math.round(results.list[j].main.temp_min);\r\n    weatherInfo[j][4] = Math.round(results.list[j].main.temp_max);\r\n    weatherInfo[j][5] = results.list[j].main.humidity;\r\n    weatherInfo[j][6] = (results.list[j].weather[0].description).charAt(0).toUpperCase() + (results.list[j].weather[0].description).slice(1);\r\n    weatherInfo[j][7] = Math.round(results.list[j].wind.speed);\r\n    weatherInfo[j][8] = \"http://openweathermap.org/img/wn/\" + results.list[j].weather[0].icon + \"@2x.png\";\r\n    weatherInfo[j][9] = results.city.name;\r\n  }\r\n\r\n  return weatherInfo;\r\n}\r\n\r\n/*\r\n  Main\r\n*/\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      results: null,\r\n      searchZipCode: 40336,\r\n    };\r\n\r\n    this.setWeather = this.setWeather.bind(this);\r\n    this.fetchWeather = this.fetchWeather.bind(this);\r\n    this.fetchWeatherSearch = this.fetchWeatherSearch.bind(this);\r\n    this.handelZipChange = this.handelZipChange.bind(this);\r\n  }\r\n\r\n  // set the results with returned json data\r\n  setWeather(results) {\r\n    this.setState({ results });\r\n  }\r\n\r\n  // fetch weather (open weather)\r\n  fetchWeather(searchZipCode) {\r\n    fetch(`https://api.openweathermap.org/data/2.5/forecast?zip=${searchZipCode},us&units=imperial&appid=08d4fea27ae00e7c79b59befd31e8d18`)\r\n      .then(response => response.json())\r\n      .then(results => this.setWeather(results));\r\n  }\r\n\r\n  // fetch weather on search submission\r\n  fetchWeatherSearch(event) {\r\n    event.preventDefault();\r\n    var searchedValue = this.state.searchZipCode;\r\n    var validZip = /^\\d{5}$|^\\d{5}-\\d{4}$/;\r\n\r\n    if (searchedValue === \"\" || searchedValue === null || !validZip.test(searchedValue)) {\r\n      alert(\"Invalid Input\");\r\n    }\r\n    else {\r\n      fetch(`https://api.openweathermap.org/data/2.5/forecast?zip=${searchedValue},us&units=imperial&appid=08d4fea27ae00e7c79b59befd31e8d18`)\r\n        .then(response => response.json())\r\n        .then(results => this.setWeather(results));\r\n    }\r\n  }\r\n\r\n  // when component mounts/lifecycle update, update the searched term and refetch data\r\n  componentDidMount() {\r\n    const { searchZipCode } = this.state;\r\n    this.fetchWeather(searchZipCode);\r\n  }\r\n\r\n  // set the searched zipCode\r\n  handelZipChange(event) {\r\n    event.preventDefault();\r\n    this.setState({ searchZipCode: event.target.value });\r\n  }\r\n\r\n  // render the app\r\n  render() {\r\n    const { results } = this.state;\r\n\r\n    // if results are initially empty, return null\r\n    if (!results) { return null; }\r\n\r\n    // sort our fetched data to populate fields\r\n    var weatherInfo = getWeatherData(results);\r\n\r\n    // if weatherInfo returns an error for an incorrect zip code, display appropriately \r\n    if (!weatherInfo) {\r\n      return (\r\n        <div className=\"App\">\r\n          <div className=\"contentContainer\">\r\n\r\n            <Navbar className=\"navBar\" bg=\"dark\" variant=\"dark\" sticky=\"top\">\r\n              <Navbar.Brand href=\"\">Quick Weather</Navbar.Brand>\r\n              <Navbar.Toggle />\r\n              <Navbar.Collapse className=\"justify-content-end\">\r\n                <Form className=\"backToTopForm\">\r\n                  <Button className=\"backToTopButton\" variant=\"dark\" onClick={scrollTop}>Back To Top</Button>\r\n                </Form>\r\n                <Navbar.Text>\r\n                  <a href=\"https://github.com/williammabernathy/Quick-Weather\">GitHub</a>\r\n                </Navbar.Text>\r\n              </Navbar.Collapse>\r\n            </Navbar>\r\n\r\n            <div className=\"formContainer\">\r\n              <Form onSubmit={(event) => { this.fetchWeatherSearch(event) }}>\r\n                <Form.Group>\r\n                  <Form.Label className=\"formLabel\">Zip Code (<b>Try Again</b>):</Form.Label>\r\n                  <Form.Control\r\n                    className=\"controlSearchBar\"\r\n                    value={this.state.searchZipCode}\r\n                    type=\"text\"\r\n                    placeholder=\"Zip Code\"\r\n                    onChange={(event) => { this.setState({ searchZipCode: event.target.value }) }}\r\n                  />\r\n                  <Form.Text className=\"formText\">\r\n                    Currently, only the U.S. is supported.\r\n                  </Form.Text>\r\n                </Form.Group>\r\n\r\n                <Button as=\"input\" type=\"submit\" value=\"Submit\" />\r\n              </Form>\r\n            </div>\r\n\r\n            <div className=\"errorContainer\">\r\n              Oops! Looks like something went wrong. Most likely, the zip code doesn't exists. <br />\r\n              If you believe the archives to be incomplete, while impossible, maybe submit an issue with <a href=\"https://openweathermap.org/api\">Open Weather</a>\r\n            </div>\r\n\r\n            <div className=\"footerContainer\">\r\n              <footer>\r\n                Built by <a href=\"https://github.com/williammabernathy\">William Abernathy</a> with React<br />\r\n                Data from <a href=\"https://openweathermap.org/api\">Open Weather</a>\r\n              </footer>\r\n            </div>\r\n          </div>\r\n        </div >\r\n      );\r\n    }\r\n\r\n    return (\r\n      <div className=\"App\">\r\n        <div className=\"contentContainer\">\r\n\r\n          <Navbar className=\"navBar\" bg=\"dark\" variant=\"dark\" sticky=\"top\">\r\n            <Navbar.Brand href=\"\">Quick Weather</Navbar.Brand>\r\n            <Navbar.Toggle />\r\n            <Navbar.Collapse className=\"justify-content-end\">\r\n              <Form className=\"backToTopForm\">\r\n                <Button className=\"backToTopButton\" variant=\"dark\" onClick={scrollTop}>Back To Top</Button>\r\n              </Form>\r\n              <Navbar.Text>\r\n                <a href=\"https://github.com/williammabernathy/Quick-Weather\">GitHub</a>\r\n              </Navbar.Text>\r\n            </Navbar.Collapse>\r\n          </Navbar>\r\n\r\n          <div className=\"formContainer\">\r\n            <Form onSubmit={(event) => { this.fetchWeatherSearch(event) }}>\r\n              <Form.Group>\r\n                <Form.Label className=\"formLabel\">Zip Code (Currently showing results for <b>{weatherInfo[0][9]}</b>):</Form.Label>\r\n                <Form.Control\r\n                  className=\"controlSearchBar\"\r\n                  value={this.state.searchZipCode}\r\n                  type=\"text\"\r\n                  placeholder=\"Zip Code\"\r\n                  onChange={(event) => { this.setState({ searchZipCode: event.target.value }) }}\r\n                />\r\n                <Form.Text className=\"formText\">\r\n                  Currently, only the U.S. is supported.\r\n                </Form.Text>\r\n              </Form.Group>\r\n\r\n              <Button as=\"input\" type=\"submit\" value=\"Submit\" />\r\n            </Form>\r\n          </div>\r\n\r\n          <div className=\"cardDeckContainer\">\r\n            <CardDeck className=\"cardDeck\">\r\n              {weatherInfo.map((data, index) => {\r\n                return (\r\n                  <Card className=\"weatherCards\" key={index} >\r\n                    <Card.Img className=\"bsCardImage\" variant=\"top\" src={weatherInfo[index][8]} alt=\"Weather Image\" />\r\n                    <Card.Header as=\"h5\">{getDaysOfWeek(data[0])}</Card.Header>\r\n                    <Card.Body>\r\n                      <Card.Text>\r\n                        Temp: {data[1]}&deg;F<br />\r\n                        Feels Like: {data[2]}&deg;F<br />\r\n                        Low: {data[3]}&deg;F<br />\r\n                        High: {data[4]}&deg;F<br />\r\n                        Humidity: {data[5]}%<br />\r\n                        Description: {data[6]}<br />\r\n                        Wind Speed: {data[7]} Miles/hour<br />\r\n                      </Card.Text>\r\n                    </Card.Body>\r\n                  </Card>\r\n                )\r\n              })}\r\n            </CardDeck>\r\n          </div>\r\n\r\n          <div className=\"footerContainer\">\r\n            <footer>\r\n              Built by <a href=\"https://github.com/williammabernathy\">William Abernathy</a> with React<br />\r\n              Data from <a href=\"https://openweathermap.org/api\">Open Weather</a>\r\n            </footer>\r\n          </div>\r\n        </div>\r\n      </div >\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n//reload on changes\r\nif (module.hot) {\r\n  module.hot.accept()\r\n}\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}